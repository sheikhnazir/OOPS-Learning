import java.util.*;
import java.io.*;
import java.lang.*;

class Node
{
    int data;
    Node next;

    Node(int x)
    {
        data = x;
        next = null;
    }
}

class Main
{
    public static void makeLoop(Node head, Node tail, int x){
        if (x == 0) return;

        Node curr = head;
        for(int i=1; i<x; i++)
            curr = curr.next;

        tail.next = curr;
    }

    public static void main (String[] args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        int num = sc.nextInt();
        Node head = new Node(num);
        Node tail = head;

        for(int i=0; i<n-1; i++)
        {
            num = sc.nextInt();
            tail.next = new Node(num);
            tail = tail.next;
        }

        int pos = sc.nextInt();
        makeLoop(head, tail, pos);

        Solution x = new Solution();
        Node y = x.detectLoop(head);
        if( y == null )
            System.out.println(0);
        else
            System.out.println(y.data);
    }
}

class Solution {
    public static Node detectLoop(Node head){
        //write code here

		//M  =  D
		//We will use this to find out the start node of cycle


		//First I need to find out the node where they meet
		Node fast = head;
		Node slow = head;

		Node meetingNode = null;

		while(fast!=null && fast.next!=null){
			fast = fast.next.next;
			slow = slow.next;

			if(fast==slow){
				meetingNode = slow;
				break;
			}
		}

		//We say that fast and slow pointer did not meet
		if(meetingNode==null)
			return null;

		//We know that meeting is not null :-
		Node node = head;
		Node node1 = meetingNode;

		while(node!=node1){
			node = node.next;
			node1 = node1.next;
		}

		//The point where they meet is the starting node of the cycle

		return node; //The common node on which they meet
		//is the starting node of the cycle : Floyd's algorithm
    }
}