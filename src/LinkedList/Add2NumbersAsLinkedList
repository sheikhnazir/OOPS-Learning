
import java.util.*;
import java.io.*;
public class Main {

    public static void main(String args[]) {
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        int m = input.nextInt();
        LinkedList a = new LinkedList();
        LinkedList b = new LinkedList();
        for(int i = 0; i < n; i++){
            a.add(input.nextInt());
        }
        for(int i = 0; i < m; i++){
            b.add(input.nextInt());
        }
        LinkedList ans = new LinkedList();
        Solution A = new Solution();
        ans.head = A.addTwoLinkedLists(a.head, b.head);
        ans.printList();

    }
}


class Node{
    int data;
    Node next;
    Node(int data){
        this.data = data;
        next = null;
    }
}
class LinkedList{
    Node head;
    void add(int data){
        Node new_node = new Node(data);
        if(head == null){
            head = new_node;
            return;
        }
        Node curr = head;
        while(curr.next != null)
            curr = curr.next;
        curr.next = new_node;
    }
    void printList()
    {
        Node temp = head;
        while (temp != null)
        {
           System.out.print(temp.data+" ");
           temp = temp.next;
        }
        System.out.println();
    }
}


class Solution
{
	static Node reverseLL(Node head){

		Node prevNode = null;
		Node nextNode = null;

		Node currNode = head;
		while(currNode!=null){
			nextNode = currNode.next;
			currNode.next = prevNode;
			prevNode = currNode;
			currNode = nextNode;
		}
		return prevNode;
	}
    public static Node addTwoLinkedLists(Node head1, Node head2)
    {
        //Write your code here
		head1 = reverseLL(head1);
		head2 = reverseLL(head2);

		Node l1 = head1;
		Node l2 = head2;

		Node newHead = null;
		Node newTail = null;

		int carry = 0;

		while(l1!=null || l2!=null || carry!=0){

			int sum = 0;

			if(l1!=null){
				sum = sum + l1.data;
				l1 = l1.next;
			}

			if(l2!=null){
				sum = sum + l2.data;
				l2 = l2.next;
			}

			sum = sum + carry;

			int value = sum%10;
			carry = sum/10;

			Node newNode = new Node(value);

			if(newHead==null){
				newHead = newNode;
				newTail = newNode;
			}else{
				newTail.next = newNode;
				newTail = newNode;
			}
		}
		return reverseLL(newHead);

    }

}