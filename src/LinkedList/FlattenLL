import java.util.*;

// Java program for flattening a Linked List
public class Main {

  /* Linked list Node*/
  static class Node {

    int data;
    Node right, down;

    Node(int data) {
      this.data = data;
      right = null;
      down = null;
    }
  }

 static Node merge(Node a,Node b){

	 //Base cases

	 if(a==null)
		 return b;
	 if(b==null)
		 return a;

	 Node currNode = null;

	 if(a.data<=b.data){
		currNode = a;
		currNode.down = merge(a.down,b);
	 }else{
		 currNode = b;
		 currNode.down = merge(a,b.down);
	 }
	 return currNode;
 }

  static Node flatten(Node node) {
    // your code here

	  //Base condition
	  if(node==null || node.right==null){ //if(i==n-1)return arr[i]
		  return node;
	  }

	// int sum = func(i+1,arr);
	  Node nextHeadNode = flatten(node.right);
	/*
		 Recursion can you bring me the arrays from node.right
	  */
	  node.right = null;
    return merge(node,nextHeadNode);

  }

static void printList(Node head) {
    // your code here
	Node curr = head;

	while(curr!=null){
		System.out.print(curr.data+" ");
		curr = curr.down;
	}
	System.out.println();
	return;
  }

  public static boolean isCorrect(Node claim) {
    if (claim.right != null) return false;
    Node copy = claim;
    while (copy.down != null) {
      if (copy.down.data < copy.data) return false;
      copy = copy.down;
    }
    return true;
  }

  // Driver's code
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    Node ll = new Node(-1), prev1 = null, head = ll;
    for (int i = 0; i < n; i++) {
      int k = sc.nextInt();
      Node prev2 = null, copy = ll;
      while (k-- != 0) {
        int val = sc.nextInt();
        copy.data = val;
        copy.down = new Node(-1);
        prev2 = copy;
        copy = copy.down;
      }
      prev2.down = null;
      ll.right = new Node(-1);
      prev1 = ll;
      ll = ll.right;
    }
    sc.close();
    prev1.right = null;
    Node flattenedNode = flatten(head);
    printList(flattenedNode);
    if (isCorrect(flattenedNode))
		System.out.println("yes");
	else
		System.out.println("no");
  }
}